@page "/blogs"
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity;
@using Bilog.Data;
@using Bilog.Data.Models;
@using static Toolbelt.Blazor.HeadElement.MetaElement
@inject UserManager<ApplicationUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SearchState SearchState
@inject IConfiguration _configuration
@inject IHttpContextAccessor httpContextAccessor
@inject IHeadElementHelper HeadElementHelper
@inherits OwningComponentBase<BlogsService>
@inject NavigationManager nav
<Title>Billah Blog</Title>
<Meta Property="og:title" Content="Billah Blog" />

<!-- Header section
================================================== -->
<section id="header" class="header-one">
    <div class="container">
        <div class="row">

            <div class="col-md-offset-3 col-md-6 col-sm-offset-2 col-sm-6">
                <div class="header-thumb">
                    <h1 class="wow fadeIn" data-wow-delay="1.6s">Blog</h1>
                    <h3 class="wow fadeInUp" data-wow-delay="1.9s">I often write about Artificial Intelligence and Web Security</h3>
                </div>
            </div>

        </div>
    </div>
</section>
@if (colBlogs.Blogs.Count == 0)
{

    <!-- Preloader section
    ================================================== -->
    <div class="preloader">

        <div class="sk-spinner sk-spinner-pulse"></div>

    </div>
}
else
{

    <!-- Blog section
    ================================================== -->
<section id="blog">
    <div class="container">
        <div class="row">

            @foreach (var blog in colBlogs.Blogs)
            {


                <div class="wow fadeInUp col-md-3 col-sm-6" data-wow-delay="1.9s">
                    <div class="blog-thumb">
                        <a href="/Blog/@blog.Link"><img src="@blog.Banner" class="img-responsive" alt="Blog"></a>
                        <a href="/Blog/@blog.Link"><h1>@blog.BlogTitle</h1></a>
                        <div class="post-format">
                            <span>By <a href="#">@blog.BlogUserName</a></span>
                            <span><i class="fa fa-date"></i> @blog.BlogDate</span>
                        </div>
                        @((MarkupString)blog.BlogSummary)
                        <a href="/Blog/@blog.Link" class="btn btn-default">Read</a>
                    </div>
                </div>


            }
        </div>
    </div>
    <div class="row" style="justify-content:center;">

        @if (ShowPreviousButton)
        {
            <button class="btn btn-light"
                    @onclick="Previous">
                <b>&#x3C; Previous</b>
            </button>
        }
        @if (ShowNextButton)
        {
            <button class="btn btn-light"
                    @onclick="Next">
                <b>Next &#x3E;</b>
            </button>
        }
        </div>
</section>
}
@code {
   

    BlogsPaged colBlogs =
        new BlogsPaged()
        {
            Blogs = new List<Blogs>(),
            BlogCount = 0
        };

    bool ShowPreviousButton
    {
        get
        {
            return (SearchState.CurrentPage > 1);
        }
    }

    bool ShowNextButton
    {
        get
        {
            return (
                (colBlogs.BlogCount > (SearchState.CurrentPage * 5))
                );
        }
    }

    
    protected override async Task OnInitializedAsync()
    {
        if (SearchState.CurrentPage == 0)
        {
            SearchState.CurrentPage = 1;
        }

        if (SearchState.CurrentCategoryID == null)
        {
            SearchState.CurrentCategoryID = "0";
        }

      

        // We access BlogsService using @Service
        colBlogs = await @Service.GetBlogsAsync(SearchState.CurrentPage, Convert.ToInt32(SearchState.CurrentCategoryID));

    }

    

    async Task Previous()
    {
        if (SearchState.CurrentPage > 1)
        {
            SearchState.CurrentPage = SearchState.CurrentPage - 1;
            colBlogs = await @Service.GetBlogsAsync(SearchState.CurrentPage, Convert.ToInt32(SearchState.CurrentCategoryID));
        }
    }

    async Task Next()
    {
        SearchState.CurrentPage = SearchState.CurrentPage + 1;
        colBlogs = await @Service.GetBlogsAsync(SearchState.CurrentPage, Convert.ToInt32(SearchState.CurrentCategoryID));
    }
}
